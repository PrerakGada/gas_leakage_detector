import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore
import dht11
import RPi.GPIO as GPIO
from time import sleep
from gpiozero import DistanceSensor
    

############# Setup Stats #############

# GPIO Mode (BOARD / BCM)
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)

GPIO.setup(7, GPIO.OUT)  # Connected to PWMA
GPIO.setup(11, GPIO.OUT)  # Connected to AIN2
GPIO.setup(12, GPIO.OUT)  # Connected to AIN1

GPIO.setup(15, GPIO.OUT)  # Connected to BIN1
GPIO.setup(16, GPIO.OUT)  # Connected to BIN2
GPIO.setup(18, GPIO.OUT)  # Connected to PWMB

# # Setup the DHT11 Sensor
# instance = dht11.DHT11(pin=21) # temperature & humidity

# # Setup the Distance Sensor
# sensor = DistanceSensor(26,20) # Distance sensor

# Connect to the Firebase
cred = credentials.Certificate('serviceAccountKey.json')
firebase_admin.initialize_app(cred)
# Create a Cloud Firestore client
database = firestore.client()
collection = database.collection("wheels")

print(collection)

############# Setup Complete #############


# Get the controller
def getController():
    try:
        controller = collection.document('controller').get().to_dict()
    except Exception as e:
        print(f"An error occurred: {e}")
    print(controller)
    return controller

# Set the controller
def setController(left, forward, behind, right):
    collection.document('controller').set({'left': left, 'forward': forward, 'behind': behind, 'right': right})
    return

# Turn off all the motors
def turnOffMotors():
    GPIO.output(12, GPIO.LOW)
    GPIO.output(11, GPIO.LOW)
    GPIO.output(7, GPIO.LOW)
    GPIO.output(16, GPIO.LOW) 
    GPIO.output(15, GPIO.LOW) 
    GPIO.output(18, GPIO.LOW)
    print("Motors are off")
    return

# Forward motion
def forward():
    GPIO.output(12, GPIO.LOW)
    GPIO.output(11, GPIO.HIGH)
    GPIO.output(7, GPIO.HIGH)
    GPIO.output(16, GPIO.LOW)
    GPIO.output(15, GPIO.HIGH)
    GPIO.output(18, GPIO.HIGH)
    print("Moving forward")
    return

# Left motion
def left():
    GPIO.output(12, GPIO.LOW)
    GPIO.output(11, GPIO.HIGH)
    GPIO.output(7, GPIO.HIGH)
    GPIO.output(16, GPIO.HIGH)
    GPIO.output(15, GPIO.LOW)
    GPIO.output(18, GPIO.HIGH)
    print("Moving left")
    return

# Right motion
def right():
    GPIO.output(12, GPIO.HIGH)
    GPIO.output(11, GPIO.LOW)
    GPIO.output(7, GPIO.HIGH)
    GPIO.output(16, GPIO.LOW)
    GPIO.output(15, GPIO.HIGH)
    GPIO.output(18, GPIO.HIGH)
    print("Moving right")
    return

# Backward motion
def backward():
    GPIO.output(12, GPIO.HIGH)
    GPIO.output(11, GPIO.LOW)
    GPIO.output(7, GPIO.HIGH)
    GPIO.output(16, GPIO.HIGH)
    GPIO.output(15, GPIO.LOW)
    GPIO.output(18, GPIO.HIGH)
    print("Moving backward")
    return

# Stop motion
def stop():
    GPIO.output(12, GPIO.LOW)
    GPIO.output(11, GPIO.LOW)
    GPIO.output(7, GPIO.LOW)
    GPIO.output(16, GPIO.LOW)
    GPIO.output(15, GPIO.LOW)
    GPIO.output(18, GPIO.LOW)
    print("Stop")
    return

# # Read the temperature 
# def readTemperature():
#     result = instance.read()
#     if result.is_valid():
#         print("Temperature: %d C" % result.temperature)
#         return result.temperature
#     else:
#         print("Error: %d" % result.error_code)
#         return result.error_code
    
# # Set the temperature
# def setTemperature(temp):
#     collection.document('temperature').set({'temp': temp})
#     return
    
# # Read the humidity
# def readHumidity():
#     result = instance.read()
#     if result.is_valid():
#         print("Humidity: %d %%" % result.humidity)
#         return result.humidity
#     else:
#         print("Error: %d" % result.error_code)
#         return result.error_code

# # Set the humidity
# def setHumidity(hum):
#     collection.document('humidity').set({'hum': hum})
#     return

# # Read the distance
# def readDistance():
#     distance = sensor.distance
#     print("Distance: %.1f m" % distance)
#     return distance

# # Set the distance
# def setDistance(dist):
#     collection.document('distance').set({'dist': dist})
#     return

# # Read the Gas Quality
# def readGasQuality():
#     gas = 0 # Add your logic here
#     print(gas)
#     return gas

# # Set the Gas Quality
# def setGasQuality(gas):
#     collection.document('gas').set({'gas': gas})
#     return


iterations = 0
# Main Loop
while True:
    print("Main Loop Started")
    controller = getController()
    # if controller['forward'] == True:
    #     forward()
    # elif controller['left'] == True:
    #     left()
    # elif controller['right'] == True:
    #     right()
    # elif controller['behind'] == True:
    #     backward()
    # else:
    #     stop()
    
    # setDistance(readDistance())
    # setTemperature(readTemperature())
    # setHumidity(readHumidity())
    # setGasQuality(readGasQuality())
    
    iterations += 1
    print("Main Loop Ended:",iterations)